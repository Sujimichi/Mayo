= Mayo
A delicious spread that's great with cucumbers / A way to spread your delicious cucumber features over several machines.

NB: not Mayonnaise, it's Mayo, cos it's Bri'ish innit!

Mayo is a command line gem to help speed the running of cucumber tests by spreading the work over several machines.  
Its primary function is to spread cucumber features but can also be used to spread rspec tests and other commands.


Mayo is still very much a work in progress.  Its pretty basic and not fit for general consumption.  That being said; I'm now running my full (normally 30 minute) test suite in around 6 minutes.
Comments, suggestions, forks and whatnot all very welcome!


==Basic Usage
Launch a mayo server in your root directory of the project you want to test;
    mayo server

Start a mayo client on several another machines
    mayo connect <servername>

Once a server is running with some clients attached you can then request actions from the server in another terminal (on the same machine as the server).

To run your features run;
    mayo run features

The clients will run a share of the tests and return their results to the server.
As you change your code and want to run the test again, just call mayo run again.

You can also pass some args to run;
    mayo run specs
    mayo run features features/just_these/*.feature

You can also re-run the tests which failed in the previous run.  
    mayo run last_failed 


==Install
Install the mayo gem on the server and client machines.  It's not rubygems worthy yet so just grab it from here and build the gem;
    git clone git://github.com/Sujimichi/Mayo.git
    cd mayo
    bundle
    rake install


==Requirements
The machine which runs a client needs to have the public ssh key of the machine running the server added to its authorized_keys file.  This is needed even when client and server are on the same machine and in which case it can be done with;
    cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys


The client will run `bundle install` to get the gems needed, but other requirements need to have been setup before hand; ie rvm, ruby, rubygems, bundler etc.



==The Mayo Solution
The notion behind it is very simple; Mirror the directory containing the files to be tested to several client machines.  Then run a command on the client and collect the response.  The command directs the clients to do a portion of the whole task.

For example, the command;
    bundle exec cucumber features/**/*.feature

This would run cucumber with whatever files where matched by features/**/*.feature.  Mayo will take that command and pass the first part "bundle exec cucumber" to each client but with only a subset of the files matched.  

In more general terms, if the command was "some_launcher thing1.file thing2.file" and there where two clients, then each client would work on one file.  In this example a third client would be redundant, however Mayo is indented to run large test suites with many files.  

When running cucumber features (Mayo's primary design aim) a single feature file can be processed by several clients with each client running different scenarios. When given the command `cucumber some.feature` Mayo will find the lines which define scenarios and send the clients more granular commands ie:
    cucumber some.feature:5 some.feature:16 feature:28            #<-command sent to 1st client
    cucumber some.feature:8 some.feature:21 feature:35 feature:42 #<-command sent to 2nd client


With either just files or specific scenarios the order is randomized before being assigned to clients.  a) This prevents the same test always being run on the same client b) its just good to add some noise!


Before a client is sent a command to process it is first sent an updated copy of the directory over rsync.  This is why the clients need the servers' id_rsa.pub in their authorized_keys.  As each client completes its portion its results are collected and displayed by the server.  The server communicates the commands and responses between the clients using Ruby TCPSockets.  

In the case of cucumber results the server will put the separate results back together to give a similar output to standard cucumber output.  With other commands (ie rspec) each clients output is simple output to the terminal which the server is in as they become ready.  

Mayo does not need any change to be made to the project being tested.  I felt that its important for this just to be a work spreader and to have no impact on the project.  


==Notes
You can just simply run several clients in different terms on one machine but they must be started from different directories, ie;
    sujimichi@yokai:~/testing/client_1$ mayo connect
    sujimichi@yokai:~/testing/client_2$ mayo connect

While it is possible to run several instances of cucumber on the same machine, there is (not surprisingly) a positive correlation between number of instances and number of "false-failing" tests!  Works ok for rspec and probably will be ok for some other commands, but not recommended for cucumber.  Its best to use other physical or virtual machines.  

The goal of getting cucumber tests to run faster is not about computational power, its about the speed at which dumb browsers can take input.  Simply splitting features between two instances of cucumber (each on a separate virtual machine running on the same physical machine) will almost certainly halve the run time.  With 5 clients I've been able to bring a 30 minute test suite down to 6 minutes.  


I am finding that, perhaps due to being randomly split or being run on different machines, some weaker tests are more likely to fail as a result of be spread with Mayo.  


==Running Custom Commands (more experimental)
    mayo run features #run all features in features/**/*.feature
    mayo run specs    #run all specs in spec/**/*spec.rb
    mayo run features features/some_feature/*.feature

"features" is just short hand for "bundle exec cucumber -p all features/support/ features/step_definitions/"
"specs" is shorthand for "bundle exec rspec".

You can also run a custom instruction (this is still very experimental and not well tested)
    mayo run "bundle exec cucumber -p all --tags @whatever" "features/**/*.feature"
    mayo run "ruby" "somefile.rb someother_file.rb"


==Why did I build Mayo?
I have a cucumber test suite for a rails app which takes over 30 minutes to run.  This results in it only ever being run before a major deploy and not continually during development. I've tried running just an 'overview' subset during dev and then the whole lot before a commit but that is far from perfect.  I want to run the whole suite and often.

There are several solutions which enable distribution of tests (most notably Testjour) but for one reason and another I was unsuccessful with Testjour.  Some of the other solutions require some config of the project being tested and I'd prefer a 'test catalyst' that did not require any change to either config or tests.
http://www.ruby-forum.com/topic/166445
    
===License
Mayo is released under the MIT license.

